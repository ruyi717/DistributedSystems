/*
 * Album Store API
 *
 * CS6650 Fall 2023
 *
 * API version: 1.0.0
 * Contact: i.gorton@northeasern.edu
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"github.com/gin-gonic/gin"
	"net/http"
)

// album represents data about a record album.
type album struct {
	ID     string  `json:"id"`
	Title  string  `json:"title"`
	Artist string  `json:"artist"`
	Price  float64 `json:"price"`
}

// albums slice to seed record album data.
var albums = []album{
	{ID: "1", Title: "Blue Train", Artist: "John Coltrane", Price: 56.99},
	{ID: "2", Title: "Jeru", Artist: "Gerry Mulligan", Price: 17.99},
	{ID: "3", Title: "Sarah Vaughan and Clifford Brown", Artist: "Sarah Vaughan", Price: 39.99},
}

// getAlbums responds with the list of all albums as JSON.
func getAlbums(c *gin.Context) {
	albumID := c.Param("albumID") // Retrieve the albumID from the URL path

	// Find the album with the specified ID
	var foundAlbum album
	for _, a := range albums {
		if a.ID == albumID {
			foundAlbum = a
			break
		}
	}

	// Check if the album was found
	if foundAlbum.ID == "" {
		c.JSON(http.StatusNotFound, gin.H{"msg": "Album not found"})
	} else {
		c.IndentedJSON(http.StatusOK, foundAlbum)
	}
}

// createAlbum handles the POST request to create a new album.
func createAlbum(c *gin.Context) {
	// Parse the form data, including the file upload
	err := c.Request.ParseMultipartForm(10 << 20) // 10 MB max file size
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Failed to parse form data"})
		return
	}

	// Retrieve the file from the form data
	file, err := c.FormFile("image")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Image not found in the request"})
		return
	}

	fileSize := 0
	buffer := make([]byte, 1024)
	uploadedFile, err := file.Open()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"msg": "Error opening uploaded file"})
		return
	}
	defer uploadedFile.Close()

	for {
		n, err := uploadedFile.Read(buffer)
		if err != nil {
			break
		}
		fileSize += n
	}

	response := gin.H{
		"albumID":   "1",
		"imageSize": fileSize,
	}
	c.JSON(http.StatusOK, response)
}

func main() {
	router := gin.Default()
	router.GET("/albums/:albumID", getAlbums)
	// Define a route for the POST request to create a new album
	router.POST("/albums", createAlbum)

	router.Run(":8080")
}
